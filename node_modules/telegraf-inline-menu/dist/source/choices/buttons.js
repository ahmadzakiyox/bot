"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createChoiceTextFunction = exports.generateChoicesPaginationButtons = exports.generateChoicesButtons = void 0;
const pagination_1 = require("../buttons/pagination");
const align_1 = require("../buttons/align");
const understand_choices_1 = require("./understand-choices");
function generateChoicesButtons(actionPrefix, isSubmenu, choices, options) {
    return async (context, path) => {
        var _a, _b;
        if (await ((_a = options.hide) === null || _a === void 0 ? void 0 : _a.call(options, context, path))) {
            return [];
        }
        const choicesConstant = typeof choices === 'function' ? await choices(context) : choices;
        const choiceKeys = understand_choices_1.getChoiceKeysFromChoices(choicesConstant);
        understand_choices_1.ensureCorrectChoiceKeys(actionPrefix, path, choiceKeys);
        const textFunction = createChoiceTextFunction(choicesConstant, options.buttonText);
        const currentPage = await ((_b = options.getCurrentPage) === null || _b === void 0 ? void 0 : _b.call(options, context));
        const keysOfPage = align_1.getButtonsOfPage(choiceKeys, options.columns, options.maxRows, currentPage);
        const buttonsOfPage = await Promise.all(keysOfPage
            .map(async (key) => {
            const text = await textFunction(context, key);
            const relativePath = actionPrefix + ':' + key + (isSubmenu ? '/' : '');
            return { text, relativePath };
        }));
        const rows = align_1.getButtonsAsRows(buttonsOfPage, options.columns);
        if (options.setPage) {
            rows.push(generateChoicesPaginationButtons(actionPrefix, choiceKeys.length, currentPage, options));
        }
        return rows;
    };
}
exports.generateChoicesButtons = generateChoicesButtons;
function generateChoicesPaginationButtons(actionPrefix, choiceKeys, currentPage, options) {
    const entriesPerPage = align_1.maximumButtonsPerPage(options.columns, options.maxRows);
    const totalPages = choiceKeys / entriesPerPage;
    const pageRecord = pagination_1.createPaginationChoices(totalPages, currentPage);
    const pageKeys = Object.keys(pageRecord).map(o => Number(o));
    const pageButtons = pageKeys
        .map((page) => ({
        relativePath: `${actionPrefix}P:${page}`,
        text: pageRecord[page],
    }));
    return pageButtons;
}
exports.generateChoicesPaginationButtons = generateChoicesPaginationButtons;
function createChoiceTextFunction(choices, buttonText) {
    if (buttonText) {
        return buttonText;
    }
    return (_, key) => understand_choices_1.getChoiceTextByKey(choices, key);
}
exports.createChoiceTextFunction = createChoiceTextFunction;
//# sourceMappingURL=buttons.js.map