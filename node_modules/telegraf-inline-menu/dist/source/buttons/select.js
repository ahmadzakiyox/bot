"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateSelectButtons = void 0;
const understand_choices_1 = require("../choices/understand-choices");
const choices_1 = require("../choices");
const prefix_1 = require("../prefix");
const align_1 = require("./align");
function generateSelectButtons(actionPrefix, choices, options) {
    return async (context, path) => {
        var _a, _b, _c;
        if (await ((_a = options.hide) === null || _a === void 0 ? void 0 : _a.call(options, context, path))) {
            return [];
        }
        const choicesConstant = typeof choices === 'function' ? await choices(context) : choices;
        const choiceKeys = understand_choices_1.getChoiceKeysFromChoices(choicesConstant);
        understand_choices_1.ensureCorrectChoiceKeys(actionPrefix, path, choiceKeys);
        const textFunction = choices_1.createChoiceTextFunction(choicesConstant, options.buttonText);
        const formatFunction = (_b = options.formatState) !== null && _b !== void 0 ? _b : ((_, textResult, state) => prefix_1.prefixEmoji(textResult, state, { hideFalseEmoji: !options.showFalseEmoji }));
        const currentPage = await ((_c = options.getCurrentPage) === null || _c === void 0 ? void 0 : _c.call(options, context));
        const keysOfPage = align_1.getButtonsOfPage(choiceKeys, options.columns, options.maxRows, currentPage);
        const buttonsOfPage = await Promise.all(keysOfPage
            .map(async (key) => {
            const textResult = await textFunction(context, key);
            const state = await options.isSet(context, key);
            const text = await formatFunction(context, textResult, state, key);
            const dropinLetter = state ? 'F' : 'T';
            const relativePath = actionPrefix + dropinLetter + ':' + key;
            return { text, relativePath };
        }));
        const rows = align_1.getButtonsAsRows(buttonsOfPage, options.columns);
        if (options.setPage) {
            rows.push(choices_1.generateChoicesPaginationButtons(actionPrefix, choiceKeys.length, currentPage, options));
        }
        return rows;
    };
}
exports.generateSelectButtons = generateSelectButtons;
//# sourceMappingURL=select.js.map