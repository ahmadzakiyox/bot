"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.maximumButtonsPerPage = exports.getButtonsAsRows = exports.getButtonsOfPage = exports.getRowsOfButtons = exports.DEFAULT_BUTTON_ROWS = exports.DEFAULT_BUTTON_COLUMNS = void 0;
exports.DEFAULT_BUTTON_COLUMNS = 6;
exports.DEFAULT_BUTTON_ROWS = 10;
function getRowsOfButtons(buttons, columns = exports.DEFAULT_BUTTON_COLUMNS, maxRows = exports.DEFAULT_BUTTON_ROWS, page = 1) {
    const relevantButtons = getButtonsOfPage(buttons, columns, maxRows, page);
    return getButtonsAsRows(relevantButtons, columns);
}
exports.getRowsOfButtons = getRowsOfButtons;
function getButtonsOfPage(buttons, columns = exports.DEFAULT_BUTTON_COLUMNS, maxRows = exports.DEFAULT_BUTTON_ROWS, page = 1) {
    const buttonsPerPage = maximumButtonsPerPage(columns, maxRows);
    const totalPages = Math.ceil(buttons.length / buttonsPerPage);
    const selectedPage = Math.max(Math.min(page, totalPages), 1);
    const pageOffset = (selectedPage - 1) * buttonsPerPage;
    return buttons.slice(pageOffset, pageOffset + buttonsPerPage);
}
exports.getButtonsOfPage = getButtonsOfPage;
function getButtonsAsRows(buttons, columns = exports.DEFAULT_BUTTON_COLUMNS) {
    const totalRows = Math.ceil(buttons.length / columns);
    const rows = [];
    for (let i = 0; i < totalRows; i++) {
        const slice = buttons.slice(i * columns, (i + 1) * columns);
        rows.push(slice);
    }
    return rows;
}
exports.getButtonsAsRows = getButtonsAsRows;
function maximumButtonsPerPage(columns = exports.DEFAULT_BUTTON_COLUMNS, maxRows = exports.DEFAULT_BUTTON_ROWS) {
    return columns * maxRows;
}
exports.maximumButtonsPerPage = maximumButtonsPerPage;
//# sourceMappingURL=align.js.map