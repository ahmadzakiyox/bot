"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateEditMessageIntoMenuFunction = exports.generateSendMenuToChatFunction = exports.resendMenuToContext = exports.deleteMenuFromContext = exports.editMenuOnContext = exports.replyMenuToContext = void 0;
const body_1 = require("./body");
const path_1 = require("./path");
/**
 * Reply a menu to a context as a new message
 * @param menu menu to be shown
 * @param context current Telegraf context to reply the menu to it
 * @param path path of the menu
 * @param extra optional additional Telegraf Extra options
 */
async function replyMenuToContext(menu, context, path, extra = {}) {
    path_1.ensurePathMenu(path);
    const body = await menu.renderBody(context, path);
    const keyboard = await menu.renderKeyboard(context, path);
    return replyRenderedMenuPartsToContext(body, keyboard, context, extra);
}
exports.replyMenuToContext = replyMenuToContext;
/**
 * Edit the context into the menu. If thats not possible the current message is deleted and a new message is replied
 * @param menu menu to be shown
 * @param context current Telegraf context to edit the menu into
 * @param path path of the menu
 * @param extra optional additional Telegraf Extra options
 */
async function editMenuOnContext(menu, context, path, extra = {}) {
    var _a;
    path_1.ensurePathMenu(path);
    const body = await menu.renderBody(context, path);
    const keyboard = await menu.renderKeyboard(context, path);
    const message = (_a = context.callbackQuery) === null || _a === void 0 ? void 0 : _a.message;
    if (!message) {
        return replyRenderedMenuPartsToContext(body, keyboard, context, extra);
    }
    if (body_1.isMediaBody(body)) {
        if ('animation' in message || 'audio' in message || 'document' in message || 'photo' in message || 'video' in message) {
            const media = {
                type: body.type,
                media: body.media,
                caption: body.text,
                parse_mode: body.parse_mode,
            };
            return context.editMessageMedia(media, createEditMediaExtra(keyboard, extra))
                // eslint-disable-next-line promise/prefer-await-to-then
                .catch(catchMessageNotModified);
        }
    }
    else if (body_1.isLocationBody(body) || body_1.isVenueBody(body) || body_1.isInvoiceBody(body)) {
        // Dont edit the message, just recreate it.
    }
    else if (body_1.isTextBody(body)) {
        const text = body_1.getBodyText(body);
        if ('text' in message) {
            return context.editMessageText(text, createTextExtra(body, keyboard, extra))
                // eslint-disable-next-line promise/prefer-await-to-then
                .catch(catchMessageNotModified);
        }
    }
    else {
        throw new TypeError('The body has to be a string or an object containing text or media. Check the telegraf-inline-menu Documentation.');
    }
    // The current menu is incompatible: delete and reply new one
    const [repliedMessage] = await Promise.all([
        replyRenderedMenuPartsToContext(body, keyboard, context, extra),
        deleteMenuFromContext(context),
    ]);
    return repliedMessage;
}
exports.editMenuOnContext = editMenuOnContext;
/**
 * Delete the message on the context.
 * If thats not possible the reply markup (keyboard) is removed. The user can not press any buttons on that old message.
 * @param context context of the message to be deleted
 */
async function deleteMenuFromContext(context) {
    try {
        await context.deleteMessage();
    }
    catch {
        await context.editMessageReplyMarkup(undefined);
    }
}
exports.deleteMenuFromContext = deleteMenuFromContext;
/**
 * Deletes to menu of the current context and replies a new one ensuring the menu is at the end of the chat.
 * @param menu menu to be shown
 * @param context current Telegraf context to send the menu to
 * @param path path of the menu
 * @param extra optional additional Telegraf Extra options
 */
async function resendMenuToContext(menu, context, path, extra = {}) {
    const [menuMessage] = await Promise.all([
        replyMenuToContext(menu, context, path, extra),
        deleteMenuFromContext(context),
    ]);
    return menuMessage;
}
exports.resendMenuToContext = resendMenuToContext;
function catchMessageNotModified(error) {
    if (error instanceof Error && error.message.includes('message is not modified')) {
        // ignore
        return false;
    }
    throw error;
}
async function replyRenderedMenuPartsToContext(body, keyboard, context, extra) {
    if (body_1.isMediaBody(body)) {
        const mediaExtra = createSendMediaExtra(body, keyboard, extra);
        // eslint-disable-next-line default-case
        switch (body.type) {
            case 'animation':
                return context.replyWithAnimation(body.media, mediaExtra);
            case 'audio':
                return context.replyWithAudio(body.media, mediaExtra);
            case 'document':
                return context.replyWithDocument(body.media, mediaExtra);
            case 'photo':
                return context.replyWithPhoto(body.media, mediaExtra);
            case 'video':
                return context.replyWithVideo(body.media, mediaExtra);
        }
    }
    if (body_1.isLocationBody(body)) {
        return context.replyWithLocation(body.location.latitude, body.location.longitude, createLocationExtra(body, keyboard, extra));
    }
    if (body_1.isVenueBody(body)) {
        const { location, title, address } = body.venue;
        return context.replyWithVenue(location.latitude, location.longitude, title, address, createVenueExtra(body, keyboard, extra));
    }
    if (body_1.isInvoiceBody(body)) {
        return context.replyWithInvoice(body.invoice, createInvoiceExtra(keyboard, extra));
    }
    if (body_1.isTextBody(body)) {
        const text = body_1.getBodyText(body);
        return context.reply(text, createTextExtra(body, keyboard, extra));
    }
    throw new Error('The body has to be a string or an object containing text or media. Check the telegraf-inline-menu Documentation.');
}
/**
 * Generate a function to send the menu towards a chat from external events
 * @param telegram The Telegram object to do the API calls with later on
 * @param menu menu to be shown
 * @param path path of the menu
 */
// eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
function generateSendMenuToChatFunction(telegram, menu, path) {
    return async (chatId, context, extra = {}) => {
        const body = await menu.renderBody(context, path);
        const keyboard = await menu.renderKeyboard(context, path);
        if (body_1.isMediaBody(body)) {
            const mediaExtra = createSendMediaExtra(body, keyboard, extra);
            // eslint-disable-next-line default-case
            switch (body.type) {
                case 'animation':
                    return telegram.sendAnimation(chatId, body.media, mediaExtra);
                case 'audio':
                    return telegram.sendAudio(chatId, body.media, mediaExtra);
                case 'document':
                    return telegram.sendDocument(chatId, body.media, mediaExtra);
                case 'photo':
                    return telegram.sendPhoto(chatId, body.media, mediaExtra);
                case 'video':
                    return telegram.sendVideo(chatId, body.media, mediaExtra);
            }
        }
        if (body_1.isLocationBody(body)) {
            return telegram.sendLocation(chatId, body.location.latitude, body.location.longitude, createLocationExtra(body, keyboard, extra));
        }
        if (body_1.isVenueBody(body)) {
            const { location, title, address } = body.venue;
            return telegram.sendVenue(chatId, location.latitude, location.longitude, title, address, createVenueExtra(body, keyboard, extra));
        }
        if (body_1.isInvoiceBody(body)) {
            // TODO: fix Telegraf typing issue
            return telegram.sendInvoice(chatId, body.invoice, createInvoiceExtra(keyboard, extra));
        }
        if (body_1.isTextBody(body)) {
            const text = body_1.getBodyText(body);
            return telegram.sendMessage(chatId, text, createTextExtra(body, keyboard, extra));
        }
        throw new Error('The body has to be a string or an object containing text or media. Check the telegraf-inline-menu Documentation.');
    };
}
exports.generateSendMenuToChatFunction = generateSendMenuToChatFunction;
/**
 * Edit the message into the the menu.
 * This fails when the current message is not compatible with the menu (you cant edit a media message into a text message and vice versa)
 * @param telegram The Telegram object to do the API calls with later on
 * @param menu menu to be shown
 * @param path path of the menu
 */
// eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
function generateEditMessageIntoMenuFunction(telegram, menu, path) {
    return async (chatId, messageId, context, extra = {}) => {
        const body = await menu.renderBody(context, path);
        const keyboard = await menu.renderKeyboard(context, path);
        if (body_1.isMediaBody(body)) {
            const media = {
                type: body.type,
                media: body.media,
                caption: body.text,
                parse_mode: body.parse_mode,
            };
            const mediaExtra = createEditMediaExtra(keyboard, extra);
            return telegram.editMessageMedia(chatId, messageId, undefined, media, mediaExtra);
        }
        if (body_1.isLocationBody(body)) {
            throw new Error('You can not edit into a location body. You have to send the menu as a new message.');
        }
        if (body_1.isVenueBody(body)) {
            throw new Error('You can not edit into a venue body. You have to send the menu as a new message.');
        }
        if (body_1.isInvoiceBody(body)) {
            throw new Error('You can not edit into an invoice body. You have to send the menu as a new message.');
        }
        if (body_1.isTextBody(body)) {
            const text = body_1.getBodyText(body);
            return telegram.editMessageText(chatId, messageId, undefined, text, createTextExtra(body, keyboard, extra));
        }
        throw new Error('The body has to be a string or an object containing text or media. Check the telegraf-inline-menu Documentation.');
    };
}
exports.generateEditMessageIntoMenuFunction = generateEditMessageIntoMenuFunction;
function createTextExtra(body, keyboard, base) {
    return {
        ...base,
        parse_mode: typeof body === 'string' ? undefined : body.parse_mode,
        disable_web_page_preview: typeof body !== 'string' && body.disable_web_page_preview,
        reply_markup: {
            inline_keyboard: keyboard.map(o => [...o]),
        },
    };
}
function createSendMediaExtra(body, keyboard, base) {
    return {
        ...base,
        parse_mode: body.parse_mode,
        caption: body.text,
        reply_markup: {
            inline_keyboard: keyboard.map(o => [...o]),
        },
    };
}
function createEditMediaExtra(keyboard, base) {
    return {
        ...base,
        reply_markup: {
            inline_keyboard: keyboard.map(o => [...o]),
        },
    };
}
function createLocationExtra(body, keyboard, base) {
    return {
        ...base,
        live_period: body.live_period,
        reply_markup: {
            inline_keyboard: keyboard.map(o => [...o]),
        },
    };
}
function createVenueExtra(body, keyboard, base) {
    return {
        ...base,
        foursquare_id: body.venue.foursquare_id,
        foursquare_type: body.venue.foursquare_type,
        reply_markup: {
            inline_keyboard: keyboard.map(o => [...o]),
        },
    };
}
function createInvoiceExtra(keyboard, base) {
    return {
        ...base,
        reply_markup: {
            inline_keyboard: keyboard.map(o => [...o]),
        },
    };
}
//# sourceMappingURL=send-menu.js.map