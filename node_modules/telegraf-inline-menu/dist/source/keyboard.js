"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Keyboard = void 0;
const generic_types_1 = require("./generic-types");
const path_1 = require("./path");
function isRow(entry) {
    return Array.isArray(entry);
}
function isCallbackButtonTemplate(kindOfButton) {
    return 'text' in kindOfButton && 'relativePath' in kindOfButton;
}
class Keyboard {
    constructor() {
        Object.defineProperty(this, "_entries", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
    }
    addCreator(creator) {
        this._entries.push(creator);
    }
    add(joinLastRow, ...buttons) {
        const lastEntry = this._entries.slice(-1)[0];
        if (joinLastRow && isRow(lastEntry)) {
            lastEntry.push(...buttons);
            return;
        }
        this._entries.push([...buttons]);
    }
    async render(context, path) {
        const arrayOfRowArrays = await Promise.all(this._entries.map(async (o) => entryToRows(o, context, path)));
        const rows = arrayOfRowArrays
            .flat(1)
            .map(row => renderRow(row, path))
            .filter(o => o.length > 0);
        return rows;
    }
}
exports.Keyboard = Keyboard;
async function entryToRows(entry, context, path) {
    if (isRow(entry)) {
        const buttonsInRow = await Promise.all(entry.map(async (button) => typeof button === 'function' ? button(context, path) : button));
        const filtered = buttonsInRow.filter(generic_types_1.filterNonNullable());
        return [filtered];
    }
    return entry(context, path);
}
function renderRow(templates, path) {
    return templates
        .map(template => isCallbackButtonTemplate(template) ? renderCallbackButtonTemplate(template, path) : template);
}
function renderCallbackButtonTemplate(template, path) {
    const absolutePath = path_1.combinePath(path, template.relativePath);
    if (absolutePath.length > 64) {
        throw new Error(`callback_data only supports 1-64 bytes. With this button (${template.relativePath}) it would get too long (${absolutePath.length}). Full path: ${absolutePath}`);
    }
    return {
        text: template.text,
        callback_data: absolutePath,
    };
}
//# sourceMappingURL=keyboard.js.map