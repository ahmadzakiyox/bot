import { Context as BaseContext } from 'telegraf';
import { Message } from 'typegram';
import { RegExpLike } from './generic-types';
import { MenuLike } from './menu-like';
import { SendMenuFunc } from './send-menu';
export interface Options<Context> {
    /**
     * Function which is used to send and update the menu.
     *
     * Defaults to `editMenuOnContext`
     */
    readonly sendMenu?: SendMenuFunc<Context>;
}
export declare class MenuMiddleware<Context extends BaseContext> {
    readonly rootTrigger: string | RegExpLike;
    readonly rootMenu: MenuLike<Context>;
    readonly options: Options<Context>;
    private readonly _sendMenu;
    private readonly _responder;
    constructor(rootTrigger: string | RegExpLike, rootMenu: MenuLike<Context>, options?: Options<Context>);
    /**
     * Send the root menu to the context. Shortcut for `replyMenuToContext(â€¦)`
     * @param context Context where the root menu should be replied to
     * @example
     * const menuMiddleware = new MenuMiddleware('/', menuTemplate)
     * bot.command('start', async ctx => menuMiddleware.replyToContext(ctx))
     */
    replyToContext(context: Context, path?: string | RegExpLike): Promise<Message>;
    /**
     * The tree structure can be shown for debugging purposes.
     * You can take a look on the menu you created.
     */
    tree(): string;
    middleware(): (context: Context, next: () => Promise<void>) => void;
}
